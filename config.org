:properties:
#+author: NikolaM-Dev (Juan David Merchan Torres)
#+startup: show2levels
:end:
#+title: Nikola's GNU Emacs configuration

* Core
** =package.el=
#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))
#+end_src
** =use-package=
#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src
** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode 1))
#+end_src
** General
#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer nkl/leader-key
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")

  (nkl/leader-key "u" '(universal-argument :wk "[U]niversal Argument")))
#+end_src
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :config
  (nkl/leader-key
   "h"		'(:ignore t		:wk "[H]elpful")
   "h f"	'(helpful-callable	:wk "[H]elpful [F]unction")
   "h k"	'(helpful-key		:wk "[H]elpful [K]ey")
   "h o"	'(helpful-symbol	:wk "[H]elpful Symb[O]l")
   "h v"	'(helpful-variable	:wk "[H]elpful [V]ariable")
   "h x"	'(helpful-command       :wk "[H]elpful [C]ommand")))
#+end_src
** Try
#+begin_src emacs-lisp
(use-package try)
#+end_src
* Options
** Autopairs
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src
** =FIDO=
#+begin_src emacs-lisp
(fido-vertical-mode 1)
#+end_src
** Relative numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
** Line numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
#+end_src
** Short answers
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Custom file
#+begin_src emacs-lisp
(setq custom-file (make-temp-file "emacs-custom-"))
#+end_src
** Disable backups
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src
** Ibuffer
#+begin_src emacs-lisp
(setq ibuffer-expert t)
#+end_src
** Show columns
#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src
** Remember last cursor position in the file
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src
** Refresh buffers when the under file has changed
#+begin_src emacs-lisp
(global-auto-revert-mode)
#+end_src
** Save minibuffer history
#+begin_src emacs-lisp
(savehist-mode)
#+end_src
** Use one space to end sentences
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
* Keymaps
** Config
#+begin_src emacs-lisp
(defun nkl/config-edit ()
  (interactive)
  (find-file (expand-file-name "config.org" user-emacs-directory)))

(nkl/leader-key
  "c"	'(:ignore t		:wk "[C]onfig")
  "c e"	'(nkl/config-edit	:wk "[C]onfig [E]edit"))
#+end_src
** Align
#+begin_src emacs-lisp
(nkl/leader-key
  "a"	'(:ignore t	:wk "[A]lign")
  "a r"	'(align-regexp	:wk "[A]lign [R]egexp"))
#+end_src
** Indent
#+begin_src emacs-lisp
(nkl/leader-key
  "i"	'(:ignore t	:wk "[I]ndent")
  "i r"	'(indent-region	:wk "[I]ndent [R]egion"))
#+end_src
** Save buffer
#+begin_src emacs-lisp
(defun nkl/save-buffer ()
  (interactive)
  (save-buffer)
  (evil-force-normal-state))

(general-define-key "C-s" 'nkl/save-buffer)
#+end_src
** Global escape
#+begin_src emacs-lisp
(general-define-key "<escape>" 'keyboard-escape-quit)
#+end_src
** Remap =list-buffers= keymap to =ibuffer=
#+begin_src emacs-lisp
(general-define-key [remap list-buffers] 'ibuffer)
#+end_src
* Evil
** Custom split functions
*** window split
#+begin_src emacs-lisp
(defun nkl/window-split ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
#+end_src
*** window vsplitv
#+begin_src emacs-lisp
(defun nkl/window-vsplit ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
#+end_src
** Setup
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-undo-system 'undo-redo)
  :config
  (define-key evil-window-map "s" 'nkl/window-split)
  (define-key evil-window-map "v" 'nkl/window-vsplit)
  ;; (define-key evil-motion-state-map (kbd "RET") nil)
  (setq org-return-follows-link t)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-mode 1))
#+end_src
** ~evil-collection~
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src
** Org
#+begin_src emacs-lisp
(use-package evil-org
  :after org
  :hook (org-mode . evil-org-mode)
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
* Git
** Magit
#+begin_src emacs-lisp
(use-package magit
  :config
  (nkl/leader-key
    "g"		'(:ignore t	:wk "[G]it")
    "g s"	'(magit-status	:wk "Ma[G]it [S]tatus")))
#+end_src
* Emacs lisp
** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (emacs-lisp-mode . rainbow-delimiters-mode))
#+end_src
* ü¶Ñ Org
** Setup
#+begin_src emacs-lisp
(use-package org
  :preface
  (defun nkl/on-org-mode ()
    (setq evil-auto-indent -1)
    (setq fill-column 80)

    (auto-fill-mode)
    (org-indent-mode 1)
    (visual-line-mode 1))
  :hook
  (org-mode . nkl/on-org-mode)
  :config
  (setq org-ellipsis "‚Ä¶")  ; ‚§µ ‚ñº ‚¨é ‚Ä¶ Ó©º ÔÖÅ
  (setq org-log-done 'time)
  (setq org-agenda-files (list
                          "~/w/2-areas/second-brain.org/"
                          user-emacs-directory))

  (nkl/leader-key
    "n"		'(:ignore t	:wk "[N]otes")
    "n A"	'(org-agenda	:wk "Org [A]genda")))
#+end_src
** Tempo
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
** Add ~<el~ to expand ~emacs-lisp~ code block
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+end_src
** Disable ~<~ autopair in org-mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
** Add more autopairs
From [[https://emacs.stackexchange.com/a/18876][Sean Whitton]]
#+begin_src emacs-lisp
(defmacro nkl/add-mode-pairs (hook pairs)
  `(add-hook ,hook
             (lambda ()
               (setq-local electric-pair-pairs (append electric-pair-pairs ,pairs))
               (setq-local electric-pair-text-pairs electric-pair-pairs))))

;; TODO move to emacs lisp section
(nkl/add-mode-pairs 'emacs-lisp-mode-hook '((?\` . ?\')))

(nkl/add-mode-pairs 'org-mode-hook '((?\~ . ?\~)))
#+end_src
** Code indentation
Set src blocks automatic indent to ~0~ instead of ~1~
#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src
** Org Superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :config
  (setq org-hide-leading-stars 1)
  ; (setq org-superstar-special-todo-items -1)
  (add-hook 'org-mode-hook 'org-superstar-mode))
#+end_src
** Change Org Mode Headings Line Height
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.25))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.15))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.05))))
 '(org-level-7 ((t (:inherit outline-5 :height 1)))))
#+end_src
** Edit source blocks in full screen
#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src
#+end_src
* UI
** Theme
*** Dream
#+begin_src emacs-lisp
(use-package ef-themes
  :config
  (load-theme 'ef-dream t))
#+end_src
*** OKSolar
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t)	; if nil, bold is universally disabled
  (setq doom-themes-enable-italic t)	; if nil, italics is universally disabled
                                        ;(load-theme 'doom-oksolar-dark t)
  )
#+end_src
*** Solarized
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t)	; if nil, bold is universally disabled
  (setq doom-themes-enable-italic t)	; if nil, italics is universally disabled
  ;;(load-theme 'doom-solarized-dark t)
  )
#+end_src
** Fonts
#+begin_src emacs-lisp
(let ((mono-spaced-font "Maple Mono NF")
      - (proportionately-spaced-font "JetBrainsMono Nerd Font"))
  (set-face-attribute 'default nil :family mono-spaced-font :height 132)
  (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 1.0)
  (set-face-attribute 'variable-pitch nil :family proportionately-spaced-font :height 1.0))
#+end_src
** Remove unwanted items
*** Menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
*** Scroll bar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src
*** Tool bar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
*** Splash screen
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
*** ~*scratch*~ message
#+begin_src emacs-lisp
(setq initial-scratch-message nil)
#+end_src
** Zen mode
#+begin_src emacs-lisp
(use-package perfect-margin
  :config
  (setq perfect-margin-visible-width 100)

  (nkl/leader-key
    "z"		'(:ignore t	:wk "[Z]en")
    "z m"	'(perfect-margin-mode	:wk "Toggle [Z]en [M]ode")))
#+end_src
** Highlight current cursor position
#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :config
  (setq dashboard-banner-logo-title "Be a high performance person, being all that you can be every day 24/7, 365")
  (setq dashboard-center-content t)
  (setq dashboard-vertically-center-content t)

  (dashboard-setup-startup-hook))
#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode))
#+end_src
* Autocomplete
#+begin_src emacs-lisp
(use-package company
  :bind (
         :map company-active-map (
                                   ("TAB" . nil)
                                   ("<tab>" . nil)
                                   ("C-j" . company-select-next-or-abort)
                                   ("C-k" . company-select-previous-or-abort)))
  :init
  (global-company-mode)
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1))
#+end_src
* Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (setq yas-snippet-dirs (list (expand-file-name "snippets" user-emacs-directory)))

  (yas-global-mode))
#+end_src
* keycast
#+begin_src emacs-lisp
(use-package keycast
  :config
  (keycast-header-line-mode))
#+end_src
* Mini Harpoon
#+begin_src emacs-lisp
(defconst nkl/harpoon-file-list-path (concat (getenv "XDG_DATA_HOME") "/emacs/harpoon.txt"))

(defun nkl/harpoon-list-get ()
  (with-temp-buffer
    (insert-file-contents nkl/harpoon-file-list-path)
    (split-string (buffer-string) "\n" t)))

(defun nkl/harpoon-list-edit ()
  (interactive)
  (find-file nkl/harpoon-file-list-path))

(defun nkl/harpoon-list-add ()
  (interactive)
  (append-to-file (concat buffer-file-name "\n" ) nil nkl/harpoon-file-list-path))

(defun nkl/harpoon-go-to (raw-position)
  (interactive)
  (let ((position (1- raw-position)))
    (let ((list-item (nth position (nkl/harpoon-list-get))))
      (when list-item
        (find-file (file-truename list-item))))))

(nkl/leader-key
  "h"	'(:ignore t						:wk "[H]arpoon")
  "h e"	'(nkl/harpoon-list-edit					:wk "[H]arpoon [E]dit List")
  "h a"	'(nkl/harpoon-list-add					:wk "[H]arpoon [A]dd File to List")
  "1"	'((lambda () (interactive) (nkl/harpoon-go-to 1))	:wk "Go to Harpoon item at position [1]")
  "2"	'((lambda () (interactive) (nkl/harpoon-go-to 2))	:wk "Go to Harpoon item at position [2]")
  "3"	'((lambda () (interactive) (nkl/harpoon-go-to 3))	:wk "Go to Harpoon item at position [3]")
  "4"	'((lambda () (interactive) (nkl/harpoon-go-to 4))	:wk "Go to Harpoon item at position [4]")
  "5"	'((lambda () (interactive) (nkl/harpoon-go-to 5))	:wk "Go to Harpoon item at position [5]")
  "6"	'((lambda () (interactive) (nkl/harpoon-go-to 6))	:wk "Go to Harpoon item at position [6]")
  "7"	'((lambda () (interactive) (nkl/harpoon-go-to 7))	:wk "Go to Harpoon item at position [7]")
  "8"	'((lambda () (interactive) (nkl/harpoon-go-to 8))	:wk "Go to Harpoon item at position [8]")
  "9"	'((lambda () (interactive) (nkl/harpoon-go-to 9))	:wk "Go to Harpoon item at position [9]")
  "0"	'((lambda () (interactive) (nkl/harpoon-go-to 10))	:wk "Go to Harpoon item at position [10]"))
#+end_src
* Macros
** Verbatium
#+begin_src emacs-lisp
(defalias 'nkl/macro-verbatim
   (kmacro "c i w = = <escape> P"))
#+end_src
* Trim White Spaces
#+begin_src emacs-lisp
(setq-default require-final-newline t)
(setq-default show-trailing-whitespace t)
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src
