#+title: Nikola's Emacs configuration
:properties:
#+author: NikolaM-Dev (Juan David Merchan Torres)
:end:

* Nikola's Emacs configuration
** Packages
*** ~package.el~
#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(package-initialize)
#+end_src
*** ~use-package~
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src
*** ~evil-mode~
I need =vi= like keybinds
#+begin_src emacs-lisp
(use-package evil
  :config
  (evil-set-initial-state 'ibuffer-mode 'normal)
  (evil-mode 1))
#+end_src
*** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+end_src
*** Try
#+begin_src emacs-lisp
(use-package try)
#+end_src
** Options
*** Autopairs
#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src
*** =FIDO=
#+begin_src emacs-lisp 
(fido-vertical-mode 1)
#+end_src
*** Relative numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
*** Line numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode t)
#+end_src
*** Short answers
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Custom file
#+begin_src emacs-lisp
(setq custom-file (make-temp-file "emacs-custom-"))
#+end_src
** Keybinds
*** Edit config
#+begin_src emacs-lisp
(defun nkl/edit-config ()
  (interactive)
  (find-file (expand-file-name "config.org" user-emacs-directory)))

(global-set-key (kbd "C-c e") 'nkl/edit-config) ; [C]onfig [E]dit
#+end_src
*** Update config
#+begin_src emacs-lisp
(defun nkl/reload-config ()
  (interactive)
  (org-babel-load-file
   (expand-file-name "config.org" user-emacs-directory)))

(global-set-key (kbd "C-c r") 'nkl/reload-config) ; [C]onfig [R]eload
#+end_src
*** Remap ~list-buffers~ keymap to ~ibuffer~
#+begin_src emacs-lisp
(global-set-key [remap list-buffers] 'ibuffer)
#+end_src
** ðŸ¦„ Org
*** Tempo
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
*** Add ~<el~ to expand ~emacs-lisp~ code block
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
	     '("el" . "src emacs-lisp"))
#+end_src
*** Disable ~<~ autopair in org-mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
*** Code indentation
Set src blocks automatic indent to ~0~ instead of ~1~
#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)
#+end_src
*** Org Superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :config
  (setq org-hide-leading-stars t)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src
** UI
*** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t)   ; if nil, bold is universally disabled
  (setq doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-ayu-mirage t))
#+end_src
*** Fonts
#+begin_src emacs-lisp
(let ((mono-spaced-font "Maple Mono NF")
      - (proportionately-spaced-font "JetBrainsMono Nerd Font"))
  (set-face-attribute 'default nil :family mono-spaced-font :height 132)
  (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 1.0)
  (set-face-attribute 'variable-pitch nil :family proportionately-spaced-font :height 1.0))
#+end_src
*** Remove unwanted items
**** Menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
**** Scroll bar
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src
**** Tool bar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
**** Splash screen
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src
**** ~*scratch*~ message
#+begin_src emacs-lisp
(setq initial-scratch-message nil)
#+end_src
*** Highlight current cursor position
#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src
