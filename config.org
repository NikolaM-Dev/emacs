:properties:
#+author: NikolaM-Dev (Juan David Merchan Torres)
#+language: en
#+startup: content
:end:
#+title: Nikola's GNU Emacs Configuration

* Options
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :config
  (blink-cursor-mode -1)		; Don't blink cursor
  (column-number-mode)			; Show columns in modeline
  (electric-pair-mode)			; Autopairs
  (global-auto-revert-mode)		; Refresh buffers when the under file has changed
  (global-display-line-numbers-mode)	; Line numbers
  (global-hl-line-mode)			; Highlight current cursor position
  (menu-bar-mode -1)			; Don't display menu bar
  (save-place-mode)			; Remember last cursor position in the buffer
  (savehist-mode)			; Save minibuffer history
  (scroll-bar-mode -1)			; Don't display scroll bar
  (tool-bar-mode -1)			; Don't display tool bar

  (setq create-lockfiles nil)				; Don't make lockfiles
  (setq custom-file (make-temp-file "emacs-custom-"))	; Use temporal custom files
  (setq display-line-numbers-type 'relative)		; Relative numbers
  (setq inhibit-startup-message t)			; Remove splash screen
  (setq initial-scratch-message nil)			; Remove *scratch* message
  (setq make-backup-files nil)				; Don't make backup files
  (setq sentence-end-double-space nil)			; Use one space to end sentences
  (setq use-dialog-box nil)				; Perfom `yes-or-no' prompts using the echo area and keyboard input
  (setq use-short-answers t)				; Use shorter responses: "y" for yes and "n" for no
  )
#+end_src
* Setup Packages
#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))
#+end_src
* Keymaps
** =general=
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-create-definer nkl/leader-key
    :states '(normal insert visual motion emacs)
    :keymaps 'override
    :prefix "SPC"
    :global-prefix "M-SPC")

  (nkl/leader-key
    "a" '(:ignore t	:wk "[A]lign")
    "c" '(:ignore t	:wk "[C]onfig")
    "g"	'(:ignore t	:wk "[G]it")
    "h" '(:ignore t	:wk "[H]elp/[H]elpful/[H]arpoon")
    "i"	'(:ignore t	:wk "[I]ndent")
    "o" '(:ignore t	:wk "[O]pen")
    "s"	'(:ignore t	:wk "[S]ort")
    "z"	'(:ignore t	:wk "[Z]en")))
#+end_src
** Save buffer
#+begin_src emacs-lisp
(defun nkl/buffer-save ()
  (interactive)
  (save-buffer)
  (evil-force-normal-state))

(general-define-key "C-s" 'nkl/buffer-save)
#+end_src
** Delete Buffer
#+begin_src emacs-lisp
(general-define-key "C-q" 'evil-delete-buffer)
#+end_src
** Quit
#+begin_src emacs-lisp
;; (general-define-key "C-q" 'evil-quit)
#+end_src
** Universal Argument
#+begin_src emacs-lisp
  (nkl/leader-key "u" '(universal-argument :wk "[U]niversal Argument"))
#+end_src
** Config
#+begin_src emacs-lisp
  (defun nkl/config-edit ()
    (interactive)
    (find-file (expand-file-name "config.org" user-emacs-directory)))

  (defun nkl/config-reload ()
    (interactive)
    (load-file (expand-file-name "init.el" user-emacs-directory)))

  (nkl/leader-key
    "c e"	'(nkl/config-edit	:wk "[C]onfig [E]edit")
    "c r"	'(nkl/config-reload	:wk "[C]onfig [R]eload"))
#+end_src
** Align
#+begin_src emacs-lisp
(nkl/leader-key
  "a r"	'(align-regexp	:wk "[A]lign [R]egexp"))
#+end_src
** Sort
#+begin_src emacs-lisp
(nkl/leader-key
  "s l"	'(sort-lines	:wk "[S]ort [L]ines"))
#+end_src
** Indent
#+begin_src emacs-lisp
(nkl/leader-key
  "i r"	'(indent-region	:wk "[I]ndent [R]egion"))
#+end_src
** Remap =list-buffers= keymap to =ibuffer=
#+begin_src emacs-lisp
(general-define-key [remap list-buffers] 'ibuffer)
#+end_src
** Info
#+begin_src emacs-lisp
(nkl/leader-key "h i" '(info :wk "[H]elp [I]nfo"))
#+end_src
* Evil
** Preface
*** window split
#+begin_src emacs-lisp
(defun nkl/window-split ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
#+end_src
*** window vsplitv
#+begin_src emacs-lisp
(defun nkl/window-vsplit ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
#+end_src
** TODO Setup
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :bind
  (:map evil-motion-state-map
        ("RET" . nil)
        ("SPC" . nil)
        ("TAB" . nil))
  :custom
  (evil-respect-visual-line-mode)	; Whether movement commands respect `visual-line-mode'
  (evil-undo-system 'undo-fu)		; Undo system Evil should use
  (evil-want-C-u-scroll t)		; Scrolls up with `C-u'
  (evil-want-Y-yank-to-eol)		; `Y' yanks to the end of the line
  (evil-want-fine-undo t)		; Whether actions are undone in several steps
  (evil-want-keybinding nil)		; Disable Evil bindinds in other modes
  :config
  (define-key evil-motion-state-map (kbd "C-e") nil)		; Un set `C-e' in motion mode
  (define-key evil-normal-state-map (kbd "C-e") nil)		; Unset `C-e' in normal mode
  (define-key evil-window-map "s" 'nkl/window-split)		; `split' and go to window
  (define-key evil-window-map "v" 'nkl/window-vsplit)		; `vsplit' and go to window
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)	; Respect `visual-mode' using j
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)	; Respect `visual-mode' using k

  (evil-mode))
#+end_src
** Undo
#+begin_src emacs-lisp
(use-package undo-fu
  :ensure t)
#+end_src
** =evil-collection=
#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (evil-collection-init))
#+end_src
** =evil-org=
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after (evil org)
  :hook (org-mode . evil-org-mode)
  :config
  (require 'evil-org-agenda)

  (evil-org-agenda-set-keys))
#+end_src
* Org
** Preface
*** =on-org-mode=
#+begin_src emacs-lisp
(defun nkl/on-org-mode ()
  (setq evil-auto-indent -1)
  (setq fill-column 80)

  (auto-fill-mode)
  (org-indent-mode)
  (visual-line-mode))
#+end_src
*** =org-tree-to-indirect-buffer=
#+begin_src emacs-lisp
(defun nkl/org-tree-to-indirect-buffer ()
  (interactive)
  (org-tree-to-indirect-buffer)
  (other-window 1)
  (delete-other-windows))
#+end_src
** Setup
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :bind
  (
   :map org-src-mode-map
   ("C-c C-c" . org-edit-src-exit)
   :map org-mode-map
   ("C-c C-x b" . nkl/org-tree-to-indirect-buffer))
  :hook
  (org-mode . nkl/on-org-mode)
  :custom
  (org-return-follows-link t)   ; Sets `RET' key in `org-mode' to follow links
  :config
  (setq org-edit-src-content-indentation 0)	; Set src blocks automatic indent to 0 instead of 1
  (setq org-ellipsis "⮧")  ; ⮧ ⬎ ⤵ ▼ …  
  (setq org-src-window-setup 'current-window)	; Edit src blocks in full screen
  (setq org-log-done 'time)
  (setq org-todo-keywords
        '((sequence "TODO(t)"
                    "|" "SKIP CANCEL(c@)" "DONE(d!)" "SKIP(s)")))
  (setq org-agenda-files (list
                          (getenv "SECOND_BRAIN_PATH")
                          user-emacs-directory))

  (nkl/leader-key "o a"	'(org-agenda	:wk "[O]pen Org [A]genda")))
#+end_src
** Change Org Mode Headings Line Height
#+begin_src emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.2)))))
#+end_src
** TODO Superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :ensure t
  :hook (org-mode . org-superstar-mode)
  :config
  (setq org-hide-leading-stars 1)
  (setq org-superstar-special-todo-items nil)
  ;; If you use Org Indent you also need to add this, otherwise the
  ;; above has no effect while Indent is enabled.
  (setq org-indent-mode-turns-on-hiding-stars nil)
  )
#+end_src
** Disable =<= autopair in =org-mode=
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda ()
                           (setq-local electric-pair-inhibit-predicate
                                       `(lambda (c)
                                          (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src
* Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :config
    (nkl/leader-key
     "h"		'(:ignore t		:wk "[H]elpful")
     "h f"	'(helpful-callable	:wk "[H]elpful [F]unction")
     "h k"	'(helpful-key		:wk "[H]elpful [K]ey")
     "h o"	'(helpful-symbol	:wk "[H]elpful Symb[O]l")
     "h v"	'(helpful-variable	:wk "[H]elpful [V]ariable")
     "h x"	'(helpful-command       :wk "[H]elpful [C]ommand")))
#+end_src
* Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode 1))
#+end_src
* Theme
** Custom Load Theme
#+begin_src emacs-lisp
  (defun nkl/theme-load (theme)
    (interactive)
    "Enhance `load-theme' by first disabling enabled themes."
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t))
#+end_src
** =ef-themes=
#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :config
    (nkl/theme-load 'ef-dream))
#+end_src
* TODO Font
Aporetic Serif Mono
#+begin_src emacs-lisp
  ;;;; Fontaine (font configurations)
  ;; Read the manual: <https://protesilaos.com/emacs/fontaine>
  (use-package fontaine
    :ensure t
    :hook
    ;; Persist the latest font preset when closing/starting Emacs.
    ((after-init . fontaine-mode)
     (after-init . (lambda ()
                     ;; Set last preset or fall back to desired style from `fontaine-presets'.
                     (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular)))))
    :bind (("C-c f" . fontaine-set-preset)
           ("C-c F" . fontaine-toggle-preset))
    :config
    ;; This is defined in Emacs C code: it belongs to font settings.
    (setq x-underline-at-descent-line nil)

    ;; And this is for Emacs28.
    (setq-default text-scale-remap-header-line t)

    ;; This is the default value.  Just including it here for
    ;; completeness.
    (setq fontaine-latest-state-file (locate-user-emacs-file "fontaine-latest-state.eld"))

    ;; The font family is my design: <https://github.com/protesilaos/aporetic>.
    (setq fontaine-presets
          '((small
             :default-height 80)
            (regular) ; like this it uses all the fallback values and is named `regular'
            (medium
             :default-family "Aporetic Serif Mono"
             :default-height 140
             :fixed-pitch-family "Aporetic Serif Mono"
             :variable-pitch-family "Aporetic Sans")
            (large
             :inherit medium
             :default-height 150)
            (presentation
             :inherit medium
             :default-height 180)
            (jumbo
             :inherit medium
             :default-height 260)
            (t
             ;; I keep all properties for didactic purposes, but most can be
             ;; omitted.  See the fontaine manual for the technicalities:
             ;; <https://protesilaos.com/emacs/fontaine>.
             :default-family "Aporetic Sans Mono"
             :default-weight regular
             :default-slant normal
             :default-width normal
             :default-height 100

             :fixed-pitch-family "Aporetic Sans Mono"
             :fixed-pitch-weight nil
             :fixed-pitch-slant nil
             :fixed-pitch-width nil
             :fixed-pitch-height 1.0

             :fixed-pitch-serif-family nil
             :fixed-pitch-serif-weight nil
             :fixed-pitch-serif-slant nil
             :fixed-pitch-serif-width nil
             :fixed-pitch-serif-height 1.0

             :variable-pitch-family "Aporetic Serif"
             :variable-pitch-weight nil
             :variable-pitch-slant nil
             :variable-pitch-width nil
             :variable-pitch-height 1.0

             :mode-line-active-family nil
             :mode-line-active-weight nil
             :mode-line-active-slant nil
             :mode-line-active-width nil
             :mode-line-active-height 1.0

             :mode-line-inactive-family nil
             :mode-line-inactive-weight nil
             :mode-line-inactive-slant nil
             :mode-line-inactive-width nil
             :mode-line-inactive-height 1.0

             :header-line-family nil
             :header-line-weight nil
             :header-line-slant nil
             :header-line-width nil
             :header-line-height 1.0

             :line-number-family nil
             :line-number-weight nil
             :line-number-slant nil
             :line-number-width nil
             :line-number-height 1.0

             :tab-bar-family nil
             :tab-bar-weight nil
             :tab-bar-slant nil
             :tab-bar-width nil
             :tab-bar-height 1.0

             :tab-line-family nil
             :tab-line-weight nil
             :tab-line-slant nil
             :tab-line-width nil
             :tab-line-height 1.0

             :bold-family nil
             :bold-slant nil
             :bold-weight bold
             :bold-width nil
             :bold-height 1.0

             :italic-family nil
             :italic-weight nil
             :italic-slant italic
             :italic-width nil
             :italic-height 1.0

             :line-spacing nil)))

    (with-eval-after-load 'pulsar
      (add-hook 'fontaine-set-preset-hook #'pulsar-pulse-line)))
#+end_src
* Minibuffer
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :custom
  ;; (vertico-scroll-margin 0) ;; Different scroll margin
  ;; (vertico-count 20) ;; Show more candidates
  ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  (vertico-cycle t) ; Enable cycling for `vertico-next/previous'
  :bind
  (:map vertico-map
        ("C-j" . vertico-next)
        ("C-k" . vertico-previous)))
#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :after vertico
  :init
  (marginalia-mode))

(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :config
  (nerd-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
#+end_src
** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  ;; (orderless-style-dispatchers '(orderless-affix-dispatch))
  ;; (orderless-component-separator #'orderless-escapable-split-on-space)
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+end_src
* Autocomplete
** Corfu
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :disabled
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

  ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  :bind
  (:map corfu-map
        ("C-j" . corfu-next)
        ("C-k" . corfu-previous))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :init
  (global-corfu-mode)
  :config
  ;; Enable auto completion and configure quitting
  (setq corfu-auto t
        corfu-quit-no-match 'separator) ;; or t
  )
#+end_src
** Company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :bind
  (:map company-active-map (
                            ("TAB" . nil)
                            ("<tab>" . nil)
                            ("C-j" . company-select-next-or-abort)
                            ("C-k" . company-select-previous-or-abort)))
  :init
  (global-company-mode)
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1))
#+end_src
* Snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (setq yas-snippet-dirs (list (expand-file-name "snippets" user-emacs-directory)))

  (yas-global-mode))
#+end_src
* Git
** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (nkl/leader-key
    "g c"	'(magit-commit	:wk "Ma[G]it [C]ommit")
    "g l"	'(magit-log	:wk "Ma[G]it [L]og")
    "g p"	'(magit-push	:wk "Ma[G]it [P]ush")
    "g s"	'(magit-status	:wk "Ma[G]it [S]tatus")))
#+end_src
* Try
#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src
* Ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :config
    (setq ibuffer-expert t))
#+end_src
* Emacs Lisp
** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    (emacs-lisp-mode . rainbow-delimiters-mode))
#+end_src
** More Autopairs
From [[https://emacs.stackexchange.com/a/18876][Sean Whitton]]
#+begin_src emacs-lisp
  (defmacro nkl/add-mode-pairs (hook pairs)
    `(add-hook ,hook
               (lambda ()
                 (setq-local electric-pair-pairs (append electric-pair-pairs ,pairs))
                 (setq-local electric-pair-text-pairs electric-pair-pairs))))

  (nkl/add-mode-pairs 'emacs-lisp-mode-hook '((?\` . ?\')))
#+end_src
* Zen Mode
#+begin_src emacs-lisp
(use-package perfect-margin
  :ensure t
  :config
  (setq perfect-margin-visible-width 100)

  (nkl/leader-key
    "z m"	'(perfect-margin-mode	:wk "Toggle [Z]en [M]ode")))
#+end_src
* Keycast
#+begin_src emacs-lisp
(use-package keycast
  :ensure t
  :config
  (keycast-mode-line-mode -1))
#+end_src
* TODO Denote
** Functions
#+begin_src emacs-lisp
(defun nkl/denote-today ()
  (interactive)
  (find-file (shell-command-to-string "n-denote-today")))

(defun nkl/denote-yesterday ()
  (interactive)
  (find-file (shell-command-to-string "n-denote-yesterday")))
#+end_src
** Setup
#+begin_src emacs-lisp
;;; Denote (simple note-taking and file-naming)

;; Read the manual: <https://protesilaos.com/emacs/denote>.  This does
;; not include all the useful features of Denote.  I have a separate
;; private setup for those, as I need to test everything is in order.
(use-package denote
  :ensure t
  :hook
  ;; If you use Markdown or plain text files you want to fontify links
  ;; upon visiting the file (Org renders links as buttons right away).
  (
   ;; (text-mode . denote-fontify-links-mode-maybe)

   ;; Highlight Denote file names in Dired buffers.  Below is the
   ;; generic approach, which is great if you rename files Denote-style
   ;; in lots of places as I do.
   ;;
   ;; If you only want the `denote-dired-mode' in select directories,
   ;; then modify the variable `denote-dired-directories' and use the
   ;; following instead:
   ;;
   ;;  (dired-mode . denote-dired-mode-in-directories)
   (dired-mode . denote-dired-mode))
  :bind
  ;; Denote DOES NOT define any key bindings.  This is for the user to
  ;; decide.  Here I only have a subset of what Denote offers.
  ( :map global-map
    ("C-c n n" . denote)
    ("C-c n N" . denote-type)
    ("C-c n o" . denote-sort-dired) ; "order" mnemonic
    ("C-c n t" . nkl/denote-today)
    ("C-c n y" . nkl/denote-yesterday)
    ;; Note that `denote-rename-file' can work from any context, not
    ;; just Dired buffers.  That is why we bind it here to the
    ;; `global-map'.
    ;;
    ;; Also see `denote-rename-file-using-front-matter' further below.
    ("C-c n r" . denote-rename-file)
    ;; If you intend to use Denote with a variety of file types, it is
    ;; easier to bind the link-related commands to the `global-map', as
    ;; shown here.  Otherwise follow the same pattern for
    ;; `org-mode-map', `markdown-mode-map', and/or `text-mode-map'.
    :map text-mode-map
    ("C-c n i" . denote-link) ; "insert" mnemonic
    ("C-c n I" . denote-add-links)
    ("C-c n b" . denote-backlinks)
    ;; Also see `denote-rename-file' further above.
    ("C-c n R" . denote-rename-file-using-front-matter)
    :map org-mode-map
    ("C-c n d l" . denote-org-extras-dblock-insert-links)
    ("C-c n d b" . denote-org-extras-dblock-insert-backlinks)
    ;; Key bindings specifically for Dired.
    :map dired-mode-map
    ("C-c C-d C-i" . denote-dired-link-marked-notes)
    ("C-c C-d C-r" . denote-dired-rename-marked-files)
    ("C-c C-d C-k" . denote-dired-rename-marked-files-with-keywords)
    ("C-c C-d C-f" . denote-dired-rename-marked-files-using-front-matter))
  :config
  ;; Remember to check the doc strings of those variables.
  (setq denote-directory (expand-file-name "~/w/2-areas/testing/"))
  (setq denote-directory (getenv "SECOND_BRAIN_PATH"))
  ;; (setq denote-file-type 'text) ; Org is the default file type

  ;; If you want to have a "controlled vocabulary" of keywords,
  ;; meaning that you only use a predefined set of them, then you want
  ;; `denote-infer-keywords' to be nil and `denote-known-keywords' to
  ;; have the keywords you need.
  (setq denote-known-keywords '("moc" "fn" "ln" "pn" "emacs"))
  (setq denote-sort-keywords t)
  ;; (setq denote-infer-keywords t)
  ;; (setq denote-excluded-directories-regexp nil)
  ;;  (setq denote-date-format nil) ; read its doc string
  (setq denote-rename-confirmations nil) ; CAREFUL with this if you are not familiar with Denote!

  (setq denote-backlinks-show-context nil)

  (setq denote-rename-buffer-format "[D] %t%b")
  (setq denote-buffer-has-backlinks-string " (<--->)")

  ;; Automatically rename Denote buffers when opening them so that
  ;; instead of their long file name they have a literal "[D]"
  ;; followed by the file's title.  Read the doc string of
  ;; `denote-rename-buffer-format' for how to modify this.
  (denote-rename-buffer-mode))

(use-package consult-denote
  :ensure t
  :bind
  (("C-c n f" . consult-denote-find)
   ("C-c n g" . consult-denote-grep))
  :config
  (consult-denote-mode))
#+end_src

#+RESULTS:
: consult-denote-grep

* White Spaces
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :hook
  (before-save-hook . whitespace-cleanup)
  :custom
  (require-final-newline t)
  :config
  (setq-default show-trailing-whitespace t))
#+end_src
* Auto Save
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :preface
  (defun nkl/save-all-unsaved ()
    "Save all unsaved buffers without ask"
    (interactive)
    (save-some-buffers t ))
  :custom
  (auto-save-default nil)
  (auto-save-visited-interval 5)
  :config
  (setq after-focus-change-function 'nkl/save-all-unsaved)

  (auto-save-visited-mode))
#+end_src
* Don't show line numbers in certain modes
#+begin_src emacs-lisp
(dolist (mode '(term-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode -1))))
#+end_src
* Mini Harpoon
#+begin_src emacs-lisp
(defconst nkl/harpoon-file-list-path (concat (getenv "XDG_DATA_HOME") "/emacs/harpoon/harpoon.txt"))

(defun nkl/harpoon-list-get ()
  (with-temp-buffer
    (insert-file-contents nkl/harpoon-file-list-path)
    (split-string (buffer-string) "\n" t)))

(defun nkl/harpoon-list-edit ()
  (interactive)
  (find-file nkl/harpoon-file-list-path))

(defun nkl/harpoon-list-add ()
  (interactive)
  (append-to-file (concat buffer-file-name "\n" ) nil nkl/harpoon-file-list-path))

(defun nkl/harpoon-go-to (raw-position)
  (interactive)
  (let ((position (1- raw-position)))
    (let ((list-item (nth position (nkl/harpoon-list-get))))
      (when list-item
        (find-file (file-truename list-item))))))

(nkl/leader-key
  "h e"	'(nkl/harpoon-list-edit					:wk "[H]arpoon [E]dit List")
  "h a"	'(nkl/harpoon-list-add					:wk "[H]arpoon [A]dd File to List")
  "1"	'((lambda () (interactive) (nkl/harpoon-go-to 1))	:wk "Go to Harpoon item at position [1]")
  "2"	'((lambda () (interactive) (nkl/harpoon-go-to 2))	:wk "Go to Harpoon item at position [2]")
  "3"	'((lambda () (interactive) (nkl/harpoon-go-to 3))	:wk "Go to Harpoon item at position [3]")
  "4"	'((lambda () (interactive) (nkl/harpoon-go-to 4))	:wk "Go to Harpoon item at position [4]")
  "5"	'((lambda () (interactive) (nkl/harpoon-go-to 5))	:wk "Go to Harpoon item at position [5]")
  "6"	'((lambda () (interactive) (nkl/harpoon-go-to 6))	:wk "Go to Harpoon item at position [6]")
  "7"	'((lambda () (interactive) (nkl/harpoon-go-to 7))	:wk "Go to Harpoon item at position [7]")
  "8"	'((lambda () (interactive) (nkl/harpoon-go-to 8))	:wk "Go to Harpoon item at position [8]")
  "9"	'((lambda () (interactive) (nkl/harpoon-go-to 9))	:wk "Go to Harpoon item at position [9]")
  "0"	'((lambda () (interactive) (nkl/harpoon-go-to 10))	:wk "Go to Harpoon item at position [10]"))
#+end_src
* TODO Review
#+begin_src emacs-lisp
(defun nkl/org-agenda-caller (letter)
  "Calls a specific org agenda view specified by the letter argument."
  (interactive)
  (org-agenda nil letter))
#+end_src
* Macros
** Verbatim
#+begin_src emacs-lisp
(defalias 'nkl/macro-verbatim
  (kmacro "c i w = = <escape> P"))
#+end_src
** Format Paragraph
#+begin_src emacs-lisp
(defalias 'nkl/macro-format-paragraph
  (kmacro "J M-q"))
#+end_src
* Pomm
#+begin_src emacs-lisp
(use-package pomm
  :ensure t
  :custom
  (pomm-ask-before-long-break 1)
  (pomm-ask-before-short-break 1)
  (pomm-ask-before-work 1)
  (pomm-audio-enabled 1)
  (pomm-long-break-period 12)
  (pomm-short-break-period 12)
  (pomm-work-period 60)
  :config
  (nkl/leader-key "p" '(pomm :wk "[P]omm"))
  (setq alert-default-style 'libnotify)

  (pomm-mode-line-mode))
#+end_src
